# commands.py
import sys
from typing import Callable, Dict, List, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
COMMAND_CONFIG = {
    "list": {
        "usage": "list",
        "desc": "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π",
        "example": "python main.py list",
        "min_args": 1,
        "args": []
    },
    "add": {
        "usage": "add <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç] [—Å–≤–æ–π—Å—Ç–≤–∞] [—Ç–∏–ø—ã_—Å–≤–æ–π—Å—Ç–≤]",
        "desc": "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å",
        "example": 'python main.py add "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞" "–í—ã—Å–æ–∫–∏–π" \\\n'
                   '    \'{"–°–µ—Ä–≤–∏—Å": ["API", "–ë—ç–∫–µ–Ω–¥"]}\' \\\n'
                   '    \'{"–°–µ—Ä–≤–∏—Å": "multi_select"}\'',
        "min_args": 3,
        "args": ["name", "priority", "properties", "property_types"]
    },
    "update": {
        "usage": "update <id> <–Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ> [—Å–≤–æ–π—Å—Ç–≤–∞] [—Ç–∏–ø—ã_—Å–≤–æ–π—Å—Ç–≤]",
        "desc": "–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å",
        "example": 'python main.py update abc123 "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞" \\\n'
                   '    \'{"–°–µ—Ä–≤–∏—Å": ["DevOps"]}\' \\\n'
                   '    \'{"–°–µ—Ä–≤–∏—Å": "multi_select"}\'',
        "min_args": 4,
        "args": ["page_id", "name", "properties", "property_types"]
    },
    "delete": {
        "usage": "delete <id>",
        "desc": "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
        "example": "python main.py delete abc123",
        "min_args": 3,
        "args": ["page_id"]
    }
}

COMMANDS: Dict[str, Dict[str, Any]] = {}


def print_help() -> None:
    """–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    for cmd, info in COMMAND_CONFIG.items():
        print(f"\nüî∏ {cmd}")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {info['usage']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info['desc']}")
        print(f"   –ü—Ä–∏–º–µ—Ä: {info['example']}")


def register_command(name: str, handler: Callable) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ."""
    if name not in COMMAND_CONFIG:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {name}")

    COMMANDS[name] = {
        "handler": handler,
        "min_args": COMMAND_CONFIG[name]["min_args"],
        "args": COMMAND_CONFIG[name]["args"]
    }


def execute_command() -> None:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    if len(sys.argv) < 2 or sys.argv[1] in ["-h", "--help", "help"]:
        print_help()
        sys.exit(1)

    command = sys.argv[1]
    if command not in COMMANDS:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print_help()
        sys.exit(1)

    cmd_info = COMMANDS[command]
    if len(sys.argv) < cmd_info["min_args"]:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {command}")
        print_help()
        sys.exit(1)

    args = sys.argv[2:]
    while len(args) < len(cmd_info["args"]):
        if cmd_info["args"][len(args)] in ["properties", "property_types"]:
            args.append("{}")
        else:
            args.append(None)

    try:
        cmd_info["handler"](*args)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
        sys.exit(1)