# main.py
import os
import sys
from dotenv import load_dotenv
from notion_sugar.core.client import NotionSugar
from commands import register_command, execute_command

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Notion API
NOTION_TOKEN = os.getenv("NOTION_TOKEN")
DATABASE_ID = os.getenv("DATABASE_ID")

if not NOTION_TOKEN or not DATABASE_ID:
    print("‚ùå –û—à–∏–±–∫–∞: NOTION_TOKEN –∏–ª–∏ DATABASE_ID –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env")
    sys.exit(1)

client = NotionSugar(NOTION_TOKEN)
db = client.db(DATABASE_ID)

def list_entries():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        db.query()
    except Exception as e:
        print(f"‚ùåMAIN –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: {e}")

def add_entry(name: str, priority: str = None, properties: str = "{}", property_types: str = "{}"):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    data = {"Name": name}
    if priority:
        data["Priority"] = priority
    try:
        new_page = db.add_row(**data)
        print(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {new_page['id']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")

def update_entry(page_id: str, name: str, properties: str = "{}", property_types: str = "{}"):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å."""
    try:
        db.update_row(page_id, Name=name)
        print(f"‚úÖ –ó–∞–ø–∏—Å—å {page_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")

def delete_entry(page_id: str):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å."""
    try:
        db.delete(page_id)
        print(f"üóëÔ∏è –ó–∞–ø–∏—Å—å {page_id} —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")

if __name__ == "__main__":
    register_command("list", list_entries)
    register_command("add", add_entry)
    register_command("update", update_entry)
    register_command("delete", delete_entry)
    execute_command()